#!/usr/bin/env bash

# Fail fast and fail hard.
set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
CACHED_DIRS=".heroku"
WORKING_DIR=$(pwd)

# Versions.
NGINX_VERSION="nginx-1.6.0"
PCRE_VERSION='pcre-8.35'

source $BIN_DIR/utils

puts-step "Retrieving heroku-buildpack-python"
cd $(dirname $0)/..
unset GIT_DIR
git submodule update --init --recursive

$ROOT_DIR/heroku-buildpack-python/bin/compile $1 $2

cd $BUILD_DIR

echo "Performing file tests"
test -d /app || echo "app"
test -d /app/.heroku || echo ".heroku"
test -d /app/.herkou/python || echo "python"
test -d /app/.heroku/python/bin || echo "bin"
test -f /app/.heroku/python/bin/pip || echo "pip"

if ! [ -x "/app/.heroku/python/bin/pelican" ]; then
  puts-step "Installing Pelican"
  test -f /app/.heroku/python/bin/pip || echo "pip"
  /app/.heroku/python/bin/pip install --use-mirrors pelican | indent

  puts-step "Installing Markdown"
  /app/.heroku/python/bin/pip install --use-mirrors Markdown | indent
fi

puts-step "Running pelican"

if [[ -f publishconf.py ]]; then
  CONFIG_FILE="publishconf.py"
elif [[ -f pelicanconf.py ]]; then
  CONFIG_FILE="pelicanconf.py"
else
  puts-warn "A pelicanconf.py or publishconf.py file is required."
  exit 1
fi

pelican -d -o $BUILD_DIR/public -s $CONFIG_FILE $BUILD_DIR/content | indent

rm -fr $CACHE_DIR
mkdir -p $CACHE_DIR
mkdir -p $BUILD_DIR/local/sbin

puts-step "Installing pcre ($PCRE_VERSION)"
if [[ ! -d "$CACHE_DIR/$PCRE_VERSION" ]]; then
  cd $CACHE_DIR
  curl -L http://downloads.sourceforge.net/pcre/$PCRE_VERSION.tar.bz2 -s | tar jx &> /dev/null
fi

puts-step "Installing nginx ($NGINX_VERSION)"
if [[ ! -d "$CACHE_DIR/$NGINX_VERSION" ]]; then
  cd $CACHE_DIR
  curl http://nginx.org/download/$NGINX_VERSION.tar.gz -s | tar xz &> /dev/null
  cd $NGINX_VERSION
  ./configure --prefix=$BUILD_DIR/local \
    --with-pcre=$CACHE_DIR/$PCRE_VERSION \
    --without-select_module \
    --without-poll_module \
    --without-http_gzip_module \
    --without-http_proxy_module \
    --with-http_gzip_static_module &> /dev/null
  make -j2 &> /dev/null
fi

cd $CACHE_DIR/$NGINX_VERSION
make install &> /dev/null

mkdir -p $BUILD_DIR/.profile.d
cp $ROOT_DIR/conf/path.sh $BUILD_DIR/.profile.d/

if [[ ! -f $BUILD_DIR/nginx.conf.erb ]]; then
  cp $ROOT_DIR/conf/nginx.conf.erb $BUILD_DIR/nginx.conf.erb
fi

cp $ROOT_DIR/conf/mime.types $BUILD_DIR/
cp $BIN_DIR/launch-nginx "$BUILD_DIR/local/sbin"

